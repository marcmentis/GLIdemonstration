#!/usr/bin/env ruby
require 'gli'
require 'todo'

# begin # XXX: Remove this begin/rescue before distributing your app
# require 'todo'
# rescue LoadError
#   STDERR.puts "In development, you need to use `bundle exec bin/todo` to run your app"
#   STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
#   STDERR.puts "Feel free to remove this message from bin/todo now"
#   exit 64
# end

include GLI::App
include Todo

program_desc 'Add new tasks, list all tasks and mark completed'

version Todo::VERSION

subcommand_option_handling :normal
arguments :strict

# READ A CONFIGURATION.YAML FILE
defaults = YAML.load_file('/Users/marcmentis/projects/awesome_cl_scripts/todo/config.rc.yaml')
# Working out how to get symbols from nested hash.  MUST BE BETTER WAY
  # puts "defaults: #{defaults}"
  # puts "defaults[:filename]: #{defaults[:filename]}"
  # puts "defaults['commands']: #{defaults['commands']}"
  # puts "defaults['commands'][:list]: #{defaults['commands'][:list]}"
  # puts "defaults['commands'][:list][:s] #{defaults['commands'][:list][:s]}"

# desc 'Describe some switch here'
# switch [:s,:switch]

desc 'Path to the todo.txt file'
# default_value './todo.txt' 
default_value "#{ENV['HOME']}/projects/awesome_cl_scripts/todo/todo.txt"
arg_name 'Name of file containing list'
flag [:f,:filename]



desc 'Create a new task in the task list'
long_desc 'A task has a name and a priority. By default, new tasks have the lowest possible priority, though this can be overridden'
arg_name 'task_name'
command :new do |c|
  c.desc 'Put the new task first in the list'
  c.switch :f

  c.desc 'Set the priority of the new task, 1 being the hightest'
  c.arg_name 'priority'
  c.default_value 'last'
  c.flag :p
  c.action do |global_options,options,args|
    # puts "Global:"
    # puts "-f - #{global_options[:f]}"
    # puts "Command:"
    # puts "-f - #{options[:f] ? 'true' : 'false'}"
    # puts "--priority - #{options[:priority]}"
    # puts "args - #{args.join{','}}"

    Task.new_task(global_options[:f], args)

    # new_task(global_options[:f], args)
     
    # If you have any errors, just raise them
    # raise "that command made no sense"

  end
end

desc 'Write out list of tasks'
arg_name 'There are no arguments for the list command'
command [:list,:ls] do |c|
  c.desc 'Sorts List by name or date'
  c.arg_name "name|date"
  # c.default_value 'name'  # If no config.rc.yaml file
  c.default_value defaults['commands'][:list][:s] || 'name'
  c.flag [:s, :sort]
  c.action do |global_options,options,args|
    File.open(global_options[:f],'r') do |file|
      counter = 1
      file.readlines.each do |line|
        name,created,completed = line.chomp.split(/,/)
        printf("%3d - %s\n",counter,Rainbow(name).bright)
        printf("      Created   : %s\n",created)
        unless completed.nil?
          printf(Rainbow("      Completed : %s\n").green,Rainbow(completed).green)
        end
        counter += 1
      end
    end

    puts " Sort choice: #{options[:s]}"  # HOW TO READ OPTIONS

  end
end


desc 'Task completed'
arg_name 'Describe arguments to done here'
command :done do |c|
  c.action do |global_options,options,args|
    TODO_FILE = global_options[:f]
    task_number = args[0].to_i
    File.open(TODO_FILE,'r') do |file|
      File.open("#{TODO_FILE}.new",'w') do |new_file|
        counter = 1
        file.readlines.each do |line|
          name,created,completed = line.chomp.split(/,/)
          if task_number == counter
            new_file.puts("#{name},#{created},#{Time.now}")
            puts "Task #{counter} completed"
          else
            new_file.puts("#{name},#{created},#{completed}")
          end
          counter += 1
        end
      end
    end
    `mv #{TODO_FILE}.new #{TODO_FILE}`
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
